/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SetContractUriInput.h"

namespace models {



SetContractUriInput::SetContractUriInput()
{
    m_Game_id = utility::conversions::to_string_t("");
    m_Game_idIsSet = false;
    m_Collection_id = utility::conversions::to_string_t("");
    m_Collection_idIsSet = false;
    m_Contract_uri = utility::conversions::to_string_t("");
    m_Contract_uriIsSet = false;
}

SetContractUriInput::~SetContractUriInput()
{
}

void SetContractUriInput::validate()
{
    // TODO: implement validation
}

web::json::value SetContractUriInput::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Game_idIsSet)
    {
        val[utility::conversions::to_string_t(U("game_id"))] = ModelBase::toJson(m_Game_id);
    }
    if(m_Collection_idIsSet)
    {
        val[utility::conversions::to_string_t(U("collection_id"))] = ModelBase::toJson(m_Collection_id);
    }
    if(m_Contract_uriIsSet)
    {
        val[utility::conversions::to_string_t(U("contract_uri"))] = ModelBase::toJson(m_Contract_uri);
    }

    return val;
}

bool SetContractUriInput::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("game_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("game_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGameId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGameId);
            setGameId(refVal_setGameId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collection_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collection_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectionId);
            setCollectionId(refVal_setCollectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contract_uri"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contract_uri")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContractUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractUri);
            setContractUri(refVal_setContractUri);
        }
    }
    return ok;
}

void SetContractUriInput::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Game_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("game_id")), m_Game_id));
    }
    if(m_Collection_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collection_id")), m_Collection_id));
    }
    if(m_Contract_uriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contract_uri")), m_Contract_uri));
    }
}

bool SetContractUriInput::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("game_id"))))
    {
        utility::string_t refVal_setGameId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("game_id"))), refVal_setGameId );
        setGameId(refVal_setGameId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collection_id"))))
    {
        utility::string_t refVal_setCollectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collection_id"))), refVal_setCollectionId );
        setCollectionId(refVal_setCollectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contract_uri"))))
    {
        utility::string_t refVal_setContractUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contract_uri"))), refVal_setContractUri );
        setContractUri(refVal_setContractUri);
    }
    return ok;
}

utility::string_t SetContractUriInput::getGameId() const
{
    return m_Game_id;
}

void SetContractUriInput::setGameId(const utility::string_t& value)
{
    m_Game_id = value;
    m_Game_idIsSet = true;
}

bool SetContractUriInput::gameIdIsSet() const
{
    return m_Game_idIsSet;
}

void SetContractUriInput::unsetGame_id()
{
    m_Game_idIsSet = false;
}
utility::string_t SetContractUriInput::getCollectionId() const
{
    return m_Collection_id;
}

void SetContractUriInput::setCollectionId(const utility::string_t& value)
{
    m_Collection_id = value;
    m_Collection_idIsSet = true;
}

bool SetContractUriInput::collectionIdIsSet() const
{
    return m_Collection_idIsSet;
}

void SetContractUriInput::unsetCollection_id()
{
    m_Collection_idIsSet = false;
}
utility::string_t SetContractUriInput::getContractUri() const
{
    return m_Contract_uri;
}

void SetContractUriInput::setContractUri(const utility::string_t& value)
{
    m_Contract_uri = value;
    m_Contract_uriIsSet = true;
}

bool SetContractUriInput::contractUriIsSet() const
{
    return m_Contract_uriIsSet;
}

void SetContractUriInput::unsetContract_uri()
{
    m_Contract_uriIsSet = false;
}
}


