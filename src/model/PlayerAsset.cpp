/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PlayerAsset.h"

namespace models {



PlayerAsset::PlayerAsset()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_Player_id = utility::conversions::to_string_t("");
    m_Player_idIsSet = false;
    m_Asset_id = utility::conversions::to_string_t("");
    m_Asset_idIsSet = false;
    m_Collection_id = utility::conversions::to_string_t("");
    m_Collection_idIsSet = false;
    m_Account_id = 0.0;
    m_Account_idIsSet = false;
    m_Project_id = utility::conversions::to_string_t("");
    m_Project_idIsSet = false;
    m_Created_on = utility::datetime();
    m_Created_onIsSet = false;
    m_Modified_on = utility::datetime();
    m_Modified_onIsSet = false;
    m_Created_by = 0.0;
    m_Created_byIsSet = false;
    m_Modified_by = 0.0;
    m_Modified_byIsSet = false;
}

PlayerAsset::~PlayerAsset()
{
}

void PlayerAsset::validate()
{
    // TODO: implement validation
}

web::json::value PlayerAsset::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_Player_idIsSet)
    {
        val[utility::conversions::to_string_t(U("player_id"))] = ModelBase::toJson(m_Player_id);
    }
    if(m_Asset_idIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_id"))] = ModelBase::toJson(m_Asset_id);
    }
    if(m_Collection_idIsSet)
    {
        val[utility::conversions::to_string_t(U("collection_id"))] = ModelBase::toJson(m_Collection_id);
    }
    if(m_Account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("account_id"))] = ModelBase::toJson(m_Account_id);
    }
    if(m_Project_idIsSet)
    {
        val[utility::conversions::to_string_t(U("project_id"))] = ModelBase::toJson(m_Project_id);
    }
    if(m_Created_onIsSet)
    {
        val[utility::conversions::to_string_t(U("created_on"))] = ModelBase::toJson(m_Created_on);
    }
    if(m_Modified_onIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_on"))] = ModelBase::toJson(m_Modified_on);
    }
    if(m_Created_byIsSet)
    {
        val[utility::conversions::to_string_t(U("created_by"))] = ModelBase::toJson(m_Created_by);
    }
    if(m_Modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_by"))] = ModelBase::toJson(m_Modified_by);
    }

    return val;
}

bool PlayerAsset::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("player_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("player_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlayerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlayerId);
            setPlayerId(refVal_setPlayerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetId);
            setAssetId(refVal_setAssetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collection_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collection_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectionId);
            setCollectionId(refVal_setCollectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_id")));
        if(!fieldValue.is_null())
        {
            double refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("project_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("project_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProjectId);
            setProjectId(refVal_setProjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedOn);
            setCreatedOn(refVal_setCreatedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedOn);
            setModifiedOn(refVal_setModifiedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_by")));
        if(!fieldValue.is_null())
        {
            double refVal_setCreatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedBy);
            setCreatedBy(refVal_setCreatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_by")));
        if(!fieldValue.is_null())
        {
            double refVal_setModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedBy);
            setModifiedBy(refVal_setModifiedBy);
        }
    }
    return ok;
}

void PlayerAsset::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_Player_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("player_id")), m_Player_id));
    }
    if(m_Asset_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_id")), m_Asset_id));
    }
    if(m_Collection_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collection_id")), m_Collection_id));
    }
    if(m_Account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_id")), m_Account_id));
    }
    if(m_Project_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("project_id")), m_Project_id));
    }
    if(m_Created_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_on")), m_Created_on));
    }
    if(m_Modified_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_on")), m_Modified_on));
    }
    if(m_Created_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_by")), m_Created_by));
    }
    if(m_Modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_by")), m_Modified_by));
    }
}

bool PlayerAsset::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        double refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("player_id"))))
    {
        utility::string_t refVal_setPlayerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("player_id"))), refVal_setPlayerId );
        setPlayerId(refVal_setPlayerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_id"))))
    {
        utility::string_t refVal_setAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_id"))), refVal_setAssetId );
        setAssetId(refVal_setAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collection_id"))))
    {
        utility::string_t refVal_setCollectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collection_id"))), refVal_setCollectionId );
        setCollectionId(refVal_setCollectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_id"))))
    {
        double refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_id"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("project_id"))))
    {
        utility::string_t refVal_setProjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("project_id"))), refVal_setProjectId );
        setProjectId(refVal_setProjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_on"))))
    {
        utility::datetime refVal_setCreatedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_on"))), refVal_setCreatedOn );
        setCreatedOn(refVal_setCreatedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_on"))))
    {
        utility::datetime refVal_setModifiedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_on"))), refVal_setModifiedOn );
        setModifiedOn(refVal_setModifiedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_by"))))
    {
        double refVal_setCreatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_by"))), refVal_setCreatedBy );
        setCreatedBy(refVal_setCreatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_by"))))
    {
        double refVal_setModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_by"))), refVal_setModifiedBy );
        setModifiedBy(refVal_setModifiedBy);
    }
    return ok;
}

utility::string_t PlayerAsset::getId() const
{
    return m_Id;
}

void PlayerAsset::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PlayerAsset::idIsSet() const
{
    return m_IdIsSet;
}

void PlayerAsset::unsetId()
{
    m_IdIsSet = false;
}
double PlayerAsset::getAmount() const
{
    return m_Amount;
}

void PlayerAsset::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool PlayerAsset::amountIsSet() const
{
    return m_AmountIsSet;
}

void PlayerAsset::unsetAmount()
{
    m_AmountIsSet = false;
}
utility::string_t PlayerAsset::getPlayerId() const
{
    return m_Player_id;
}

void PlayerAsset::setPlayerId(const utility::string_t& value)
{
    m_Player_id = value;
    m_Player_idIsSet = true;
}

bool PlayerAsset::playerIdIsSet() const
{
    return m_Player_idIsSet;
}

void PlayerAsset::unsetPlayer_id()
{
    m_Player_idIsSet = false;
}
utility::string_t PlayerAsset::getAssetId() const
{
    return m_Asset_id;
}

void PlayerAsset::setAssetId(const utility::string_t& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}

bool PlayerAsset::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}

void PlayerAsset::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
utility::string_t PlayerAsset::getCollectionId() const
{
    return m_Collection_id;
}

void PlayerAsset::setCollectionId(const utility::string_t& value)
{
    m_Collection_id = value;
    m_Collection_idIsSet = true;
}

bool PlayerAsset::collectionIdIsSet() const
{
    return m_Collection_idIsSet;
}

void PlayerAsset::unsetCollection_id()
{
    m_Collection_idIsSet = false;
}
double PlayerAsset::getAccountId() const
{
    return m_Account_id;
}

void PlayerAsset::setAccountId(double value)
{
    m_Account_id = value;
    m_Account_idIsSet = true;
}

bool PlayerAsset::accountIdIsSet() const
{
    return m_Account_idIsSet;
}

void PlayerAsset::unsetAccount_id()
{
    m_Account_idIsSet = false;
}
utility::string_t PlayerAsset::getProjectId() const
{
    return m_Project_id;
}

void PlayerAsset::setProjectId(const utility::string_t& value)
{
    m_Project_id = value;
    m_Project_idIsSet = true;
}

bool PlayerAsset::projectIdIsSet() const
{
    return m_Project_idIsSet;
}

void PlayerAsset::unsetProject_id()
{
    m_Project_idIsSet = false;
}
utility::datetime PlayerAsset::getCreatedOn() const
{
    return m_Created_on;
}

void PlayerAsset::setCreatedOn(const utility::datetime& value)
{
    m_Created_on = value;
    m_Created_onIsSet = true;
}

bool PlayerAsset::createdOnIsSet() const
{
    return m_Created_onIsSet;
}

void PlayerAsset::unsetCreated_on()
{
    m_Created_onIsSet = false;
}
utility::datetime PlayerAsset::getModifiedOn() const
{
    return m_Modified_on;
}

void PlayerAsset::setModifiedOn(const utility::datetime& value)
{
    m_Modified_on = value;
    m_Modified_onIsSet = true;
}

bool PlayerAsset::modifiedOnIsSet() const
{
    return m_Modified_onIsSet;
}

void PlayerAsset::unsetModified_on()
{
    m_Modified_onIsSet = false;
}
double PlayerAsset::getCreatedBy() const
{
    return m_Created_by;
}

void PlayerAsset::setCreatedBy(double value)
{
    m_Created_by = value;
    m_Created_byIsSet = true;
}

bool PlayerAsset::createdByIsSet() const
{
    return m_Created_byIsSet;
}

void PlayerAsset::unsetCreated_by()
{
    m_Created_byIsSet = false;
}
double PlayerAsset::getModifiedBy() const
{
    return m_Modified_by;
}

void PlayerAsset::setModifiedBy(double value)
{
    m_Modified_by = value;
    m_Modified_byIsSet = true;
}

bool PlayerAsset::modifiedByIsSet() const
{
    return m_Modified_byIsSet;
}

void PlayerAsset::unsetModified_by()
{
    m_Modified_byIsSet = false;
}
}


