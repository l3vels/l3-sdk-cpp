/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Transaction.h
 *
 * 
 */

#ifndef MODELS_Transaction_H_
#define MODELS_Transaction_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace models {


/// <summary>
/// 
/// </summary>
class  Transaction
    : public ModelBase
{
public:
    Transaction();
    virtual ~Transaction();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Transaction members

    /// <summary>
    /// The unique identifier for the transaction entity.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Transaction status in Blockchain. Can be pending, success or fail
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// Address of the sender of the transaction.
    /// </summary>
    utility::string_t getFrom() const;
    bool fromIsSet() const;
    void unsetFrom();

    void setFrom(const utility::string_t& value);

    /// <summary>
    /// Address of the receiver of the transaction. It can be contract address or player address if it is a transfer transaction.
    /// </summary>
    utility::string_t getTo() const;
    bool toIsSet() const;
    void unsetTo();

    void setTo(const utility::string_t& value);

    /// <summary>
    /// Contract ID the transaction is associated with.
    /// </summary>
    utility::string_t getContractId() const;
    bool contractIdIsSet() const;
    void unsetContract_id();

    void setContractId(const utility::string_t& value);

    /// <summary>
    /// Contract address where the transaction happened.
    /// </summary>
    utility::string_t getContractAddress() const;
    bool contractAddressIsSet() const;
    void unsetContract_address();

    void setContractAddress(const utility::string_t& value);

    /// <summary>
    /// Main blockchain identifier: Ethereum, Polygon, etc.
    /// </summary>
    utility::string_t getBlockchain() const;
    bool blockchainIsSet() const;
    void unsetBlockchain();

    void setBlockchain(const utility::string_t& value);

    /// <summary>
    /// Chain name identifier: Ethereum, Goerli, Sepolia, PolygonPoS, etc.
    /// </summary>
    utility::string_t getChainName() const;
    bool chainNameIsSet() const;
    void unsetChain_name();

    void setChainName(const utility::string_t& value);

    /// <summary>
    /// Chain ID: 1 for Ethereum, 5 for Goerli, 80001 for Polygon Mumbai, etc.
    /// </summary>
    double getChainId() const;
    bool chainIdIsSet() const;
    void unsetChain_id();

    void setChainId(double value);

    /// <summary>
    /// Chain environment: Testnet, Mainnet, etc.
    /// </summary>
    utility::string_t getEnvironment() const;
    bool environmentIsSet() const;
    void unsetEnvironment();

    void setEnvironment(const utility::string_t& value);

    /// <summary>
    /// Unique transaction hash in the blockchain.
    /// </summary>
    utility::string_t getTransactionHash() const;
    bool transactionHashIsSet() const;
    void unsetTransaction_hash();

    void setTransactionHash(const utility::string_t& value);

    /// <summary>
    /// Unique block number in the blockchain.
    /// </summary>
    double getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(double value);

    /// <summary>
    /// Transaction type: Mint, Transfer, Award, Airdrop, etc.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// Function method name that was called in smart contract
    /// </summary>
    utility::string_t getMethod() const;
    bool methodIsSet() const;
    void unsetMethod();

    void setMethod(const utility::string_t& value);

    /// <summary>
    /// List of events that were emitted in the transaction
    /// </summary>
    std::vector<utility::string_t>& getEvents();
    bool eventsIsSet() const;
    void unsetEvents();

    void setEvents(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The unique identifier of the game that the transaction is associated with. This allows developers to organize their transactions by game and helps with tracking and reporting.
    /// </summary>
    utility::string_t getGameId() const;
    bool gameIdIsSet() const;
    void unsetGame_id();

    void setGameId(const utility::string_t& value);

    /// <summary>
    /// The unique identifier of the collection that the transaction is associated with. This allows developers to organize their transactions by game and helps with tracking and reporting.
    /// </summary>
    utility::string_t getCollectionId() const;
    bool collectionIdIsSet() const;
    void unsetCollection_id();

    void setCollectionId(const utility::string_t& value);

    /// <summary>
    /// The unique identifier of the account that the transaction belongs to.
    /// </summary>
    utility::string_t getAccountId() const;
    bool accountIdIsSet() const;
    void unsetAccount_id();

    void setAccountId(const utility::string_t& value);

    /// <summary>
    /// The date when the collection was created.
    /// </summary>
    utility::datetime getCreatedOn() const;
    bool createdOnIsSet() const;
    void unsetCreated_on();

    void setCreatedOn(const utility::datetime& value);

    /// <summary>
    /// The date when the collection was last modified.
    /// </summary>
    utility::datetime getModifiedOn() const;
    bool modifiedOnIsSet() const;
    void unsetModified_on();

    void setModifiedOn(const utility::datetime& value);

    /// <summary>
    /// The Id of the user who created the collection.
    /// </summary>
    utility::string_t getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreated_by();

    void setCreatedBy(const utility::string_t& value);

    /// <summary>
    /// The Id of the user who last modified the collection.
    /// </summary>
    utility::string_t getModifiedBy() const;
    bool modifiedByIsSet() const;
    void unsetModified_by();

    void setModifiedBy(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_From;
    bool m_FromIsSet;
    utility::string_t m_To;
    bool m_ToIsSet;
    utility::string_t m_Contract_id;
    bool m_Contract_idIsSet;
    utility::string_t m_Contract_address;
    bool m_Contract_addressIsSet;
    utility::string_t m_Blockchain;
    bool m_BlockchainIsSet;
    utility::string_t m_Chain_name;
    bool m_Chain_nameIsSet;
    double m_Chain_id;
    bool m_Chain_idIsSet;
    utility::string_t m_Environment;
    bool m_EnvironmentIsSet;
    utility::string_t m_Transaction_hash;
    bool m_Transaction_hashIsSet;
    double m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Method;
    bool m_MethodIsSet;
    std::vector<utility::string_t> m_Events;
    bool m_EventsIsSet;
    utility::string_t m_Game_id;
    bool m_Game_idIsSet;
    utility::string_t m_Collection_id;
    bool m_Collection_idIsSet;
    utility::string_t m_Account_id;
    bool m_Account_idIsSet;
    utility::datetime m_Created_on;
    bool m_Created_onIsSet;
    utility::datetime m_Modified_on;
    bool m_Modified_onIsSet;
    utility::string_t m_Created_by;
    bool m_Created_byIsSet;
    utility::string_t m_Modified_by;
    bool m_Modified_byIsSet;
};


}

#endif /* MODELS_Transaction_H_ */
