/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssetApi.h
 *
 * 
 */

#ifndef API_AssetApi_H_
#define API_AssetApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Asset.h"
#include "CppRestOpenAPIClient/model/AssetsResponse.h"
#include "CppRestOpenAPIClient/model/UpdateAssetInput.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace api {

using namespace models;



class  AssetApi 
{
public:

    explicit AssetApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AssetApi();

    /// <summary>
    /// Count assets
    /// </summary>
    /// <remarks>
    /// Counts total assets in game.
    /// </remarks>
    /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
    /// <param name="gameId"></param>
    pplx::task<double> countByGame(
        utility::string_t authorization,
        utility::string_t gameId
    ) const;
    /// <summary>
    /// Retrieve asset by ID
    /// </summary>
    /// <remarks>
    /// Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
    /// </remarks>
    /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
    /// <param name="id">Asset ID to find</param>
    /// <param name="gameId">Game ID to find asset in</param>
    pplx::task<std::shared_ptr<Asset>> getAssetById(
        utility::string_t authorization,
        utility::string_t id,
        utility::string_t gameId
    ) const;
    /// <summary>
    /// Retrieve assets
    /// </summary>
    /// <remarks>
    /// This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
    /// </remarks>
    /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
    /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
    /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="searchText">Search assets by name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Number of assets to return per page (optional, default to 0.0)</param>
    /// <param name="page">Page number (optional, default to 0.0)</param>
    pplx::task<std::shared_ptr<AssetsResponse>> getAssets(
        utility::string_t authorization,
        utility::string_t gameId,
        boost::optional<utility::string_t> collectionId,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> searchText,
        boost::optional<double> limit,
        boost::optional<double> page
    ) const;
    /// <summary>
    /// Update asset
    /// </summary>
    /// <remarks>
    /// Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
    /// </remarks>
    /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
    /// <param name="id">Asset ID to update</param>
    /// <param name="updateAssetInput"></param>
    pplx::task<std::shared_ptr<Asset>> updateAsset(
        utility::string_t authorization,
        utility::string_t id,
        std::shared_ptr<UpdateAssetInput> updateAssetInput
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}

#endif /* API_AssetApi_H_ */

