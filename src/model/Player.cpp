/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Player.h"

namespace models {



Player::Player()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Unique_id = utility::conversions::to_string_t("");
    m_Unique_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Avatar = utility::conversions::to_string_t("");
    m_AvatarIsSet = false;
    m_Custom_propsIsSet = false;
    m_Last_seen = utility::datetime();
    m_Last_seenIsSet = false;
    m_Account_id = utility::conversions::to_string_t("");
    m_Account_idIsSet = false;
    m_Game_id = utility::conversions::to_string_t("");
    m_Game_idIsSet = false;
    m_Created_on = utility::datetime();
    m_Created_onIsSet = false;
    m_Modified_on = utility::datetime();
    m_Modified_onIsSet = false;
    m_Created_by = utility::conversions::to_string_t("");
    m_Created_byIsSet = false;
    m_Modified_by = utility::conversions::to_string_t("");
    m_Modified_byIsSet = false;
    m_Is_create_wallet = false;
    m_Is_create_walletIsSet = false;
}

Player::~Player()
{
}

void Player::validate()
{
    // TODO: implement validation
}

web::json::value Player::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Unique_idIsSet)
    {
        val[utility::conversions::to_string_t(U("unique_id"))] = ModelBase::toJson(m_Unique_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_AvatarIsSet)
    {
        val[utility::conversions::to_string_t(U("avatar"))] = ModelBase::toJson(m_Avatar);
    }
    if(m_Custom_propsIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_props"))] = ModelBase::toJson(m_Custom_props);
    }
    if(m_Last_seenIsSet)
    {
        val[utility::conversions::to_string_t(U("last_seen"))] = ModelBase::toJson(m_Last_seen);
    }
    if(m_Account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("account_id"))] = ModelBase::toJson(m_Account_id);
    }
    if(m_Game_idIsSet)
    {
        val[utility::conversions::to_string_t(U("game_id"))] = ModelBase::toJson(m_Game_id);
    }
    if(m_Created_onIsSet)
    {
        val[utility::conversions::to_string_t(U("created_on"))] = ModelBase::toJson(m_Created_on);
    }
    if(m_Modified_onIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_on"))] = ModelBase::toJson(m_Modified_on);
    }
    if(m_Created_byIsSet)
    {
        val[utility::conversions::to_string_t(U("created_by"))] = ModelBase::toJson(m_Created_by);
    }
    if(m_Modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_by"))] = ModelBase::toJson(m_Modified_by);
    }
    if(m_Is_create_walletIsSet)
    {
        val[utility::conversions::to_string_t(U("is_create_wallet"))] = ModelBase::toJson(m_Is_create_wallet);
    }

    return val;
}

bool Player::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unique_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unique_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUniqueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueId);
            setUniqueId(refVal_setUniqueId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsername);
            setUsername(refVal_setUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("avatar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("avatar")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAvatar;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvatar);
            setAvatar(refVal_setAvatar);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setCustomProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomProps);
            setCustomProps(refVal_setCustomProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_seen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_seen")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastSeen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastSeen);
            setLastSeen(refVal_setLastSeen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("game_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("game_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGameId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGameId);
            setGameId(refVal_setGameId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedOn);
            setCreatedOn(refVal_setCreatedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedOn);
            setModifiedOn(refVal_setModifiedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedBy);
            setCreatedBy(refVal_setCreatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedBy);
            setModifiedBy(refVal_setModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_create_wallet"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_create_wallet")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsCreateWallet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsCreateWallet);
            setIsCreateWallet(refVal_setIsCreateWallet);
        }
    }
    return ok;
}

void Player::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Unique_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unique_id")), m_Unique_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_AvatarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("avatar")), m_Avatar));
    }
    if(m_Custom_propsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_props")), m_Custom_props));
    }
    if(m_Last_seenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_seen")), m_Last_seen));
    }
    if(m_Account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_id")), m_Account_id));
    }
    if(m_Game_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("game_id")), m_Game_id));
    }
    if(m_Created_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_on")), m_Created_on));
    }
    if(m_Modified_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_on")), m_Modified_on));
    }
    if(m_Created_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_by")), m_Created_by));
    }
    if(m_Modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_by")), m_Modified_by));
    }
    if(m_Is_create_walletIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_create_wallet")), m_Is_create_wallet));
    }
}

bool Player::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unique_id"))))
    {
        utility::string_t refVal_setUniqueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unique_id"))), refVal_setUniqueId );
        setUniqueId(refVal_setUniqueId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_setUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_setUsername );
        setUsername(refVal_setUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("avatar"))))
    {
        utility::string_t refVal_setAvatar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("avatar"))), refVal_setAvatar );
        setAvatar(refVal_setAvatar);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_props"))))
    {
        std::shared_ptr<Object> refVal_setCustomProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_props"))), refVal_setCustomProps );
        setCustomProps(refVal_setCustomProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_seen"))))
    {
        utility::datetime refVal_setLastSeen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_seen"))), refVal_setLastSeen );
        setLastSeen(refVal_setLastSeen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_id"))))
    {
        utility::string_t refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_id"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("game_id"))))
    {
        utility::string_t refVal_setGameId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("game_id"))), refVal_setGameId );
        setGameId(refVal_setGameId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_on"))))
    {
        utility::datetime refVal_setCreatedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_on"))), refVal_setCreatedOn );
        setCreatedOn(refVal_setCreatedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_on"))))
    {
        utility::datetime refVal_setModifiedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_on"))), refVal_setModifiedOn );
        setModifiedOn(refVal_setModifiedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_by"))))
    {
        utility::string_t refVal_setCreatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_by"))), refVal_setCreatedBy );
        setCreatedBy(refVal_setCreatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_by"))))
    {
        utility::string_t refVal_setModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_by"))), refVal_setModifiedBy );
        setModifiedBy(refVal_setModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_create_wallet"))))
    {
        bool refVal_setIsCreateWallet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_create_wallet"))), refVal_setIsCreateWallet );
        setIsCreateWallet(refVal_setIsCreateWallet);
    }
    return ok;
}

utility::string_t Player::getId() const
{
    return m_Id;
}

void Player::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Player::idIsSet() const
{
    return m_IdIsSet;
}

void Player::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Player::getUniqueId() const
{
    return m_Unique_id;
}

void Player::setUniqueId(const utility::string_t& value)
{
    m_Unique_id = value;
    m_Unique_idIsSet = true;
}

bool Player::uniqueIdIsSet() const
{
    return m_Unique_idIsSet;
}

void Player::unsetUnique_id()
{
    m_Unique_idIsSet = false;
}
utility::string_t Player::getName() const
{
    return m_Name;
}

void Player::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Player::nameIsSet() const
{
    return m_NameIsSet;
}

void Player::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Player::getUsername() const
{
    return m_Username;
}

void Player::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool Player::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void Player::unsetUsername()
{
    m_UsernameIsSet = false;
}
utility::string_t Player::getEmail() const
{
    return m_Email;
}

void Player::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool Player::emailIsSet() const
{
    return m_EmailIsSet;
}

void Player::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t Player::getAvatar() const
{
    return m_Avatar;
}

void Player::setAvatar(const utility::string_t& value)
{
    m_Avatar = value;
    m_AvatarIsSet = true;
}

bool Player::avatarIsSet() const
{
    return m_AvatarIsSet;
}

void Player::unsetAvatar()
{
    m_AvatarIsSet = false;
}
std::shared_ptr<Object> Player::getCustomProps() const
{
    return m_Custom_props;
}

void Player::setCustomProps(const std::shared_ptr<Object>& value)
{
    m_Custom_props = value;
    m_Custom_propsIsSet = true;
}

bool Player::customPropsIsSet() const
{
    return m_Custom_propsIsSet;
}

void Player::unsetCustom_props()
{
    m_Custom_propsIsSet = false;
}
utility::datetime Player::getLastSeen() const
{
    return m_Last_seen;
}

void Player::setLastSeen(const utility::datetime& value)
{
    m_Last_seen = value;
    m_Last_seenIsSet = true;
}

bool Player::lastSeenIsSet() const
{
    return m_Last_seenIsSet;
}

void Player::unsetLast_seen()
{
    m_Last_seenIsSet = false;
}
utility::string_t Player::getAccountId() const
{
    return m_Account_id;
}

void Player::setAccountId(const utility::string_t& value)
{
    m_Account_id = value;
    m_Account_idIsSet = true;
}

bool Player::accountIdIsSet() const
{
    return m_Account_idIsSet;
}

void Player::unsetAccount_id()
{
    m_Account_idIsSet = false;
}
utility::string_t Player::getGameId() const
{
    return m_Game_id;
}

void Player::setGameId(const utility::string_t& value)
{
    m_Game_id = value;
    m_Game_idIsSet = true;
}

bool Player::gameIdIsSet() const
{
    return m_Game_idIsSet;
}

void Player::unsetGame_id()
{
    m_Game_idIsSet = false;
}
utility::datetime Player::getCreatedOn() const
{
    return m_Created_on;
}

void Player::setCreatedOn(const utility::datetime& value)
{
    m_Created_on = value;
    m_Created_onIsSet = true;
}

bool Player::createdOnIsSet() const
{
    return m_Created_onIsSet;
}

void Player::unsetCreated_on()
{
    m_Created_onIsSet = false;
}
utility::datetime Player::getModifiedOn() const
{
    return m_Modified_on;
}

void Player::setModifiedOn(const utility::datetime& value)
{
    m_Modified_on = value;
    m_Modified_onIsSet = true;
}

bool Player::modifiedOnIsSet() const
{
    return m_Modified_onIsSet;
}

void Player::unsetModified_on()
{
    m_Modified_onIsSet = false;
}
utility::string_t Player::getCreatedBy() const
{
    return m_Created_by;
}

void Player::setCreatedBy(const utility::string_t& value)
{
    m_Created_by = value;
    m_Created_byIsSet = true;
}

bool Player::createdByIsSet() const
{
    return m_Created_byIsSet;
}

void Player::unsetCreated_by()
{
    m_Created_byIsSet = false;
}
utility::string_t Player::getModifiedBy() const
{
    return m_Modified_by;
}

void Player::setModifiedBy(const utility::string_t& value)
{
    m_Modified_by = value;
    m_Modified_byIsSet = true;
}

bool Player::modifiedByIsSet() const
{
    return m_Modified_byIsSet;
}

void Player::unsetModified_by()
{
    m_Modified_byIsSet = false;
}
bool Player::isIsCreateWallet() const
{
    return m_Is_create_wallet;
}

void Player::setIsCreateWallet(bool value)
{
    m_Is_create_wallet = value;
    m_Is_create_walletIsSet = true;
}

bool Player::isCreateWalletIsSet() const
{
    return m_Is_create_walletIsSet;
}

void Player::unsetIs_create_wallet()
{
    m_Is_create_walletIsSet = false;
}
}


