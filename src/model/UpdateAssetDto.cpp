/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateAssetDto.h"

namespace models {



UpdateAssetDto::UpdateAssetDto()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Supply = 0.0;
    m_SupplyIsSet = false;
    m_Asset_url = utility::conversions::to_string_t("");
    m_Asset_urlIsSet = false;
    m_Custom_propsIsSet = false;
    m_Collection_id = utility::conversions::to_string_t("");
    m_Collection_idIsSet = false;
    m_Project_id = utility::conversions::to_string_t("");
    m_Project_idIsSet = false;
}

UpdateAssetDto::~UpdateAssetDto()
{
}

void UpdateAssetDto::validate()
{
    // TODO: implement validation
}

web::json::value UpdateAssetDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_SupplyIsSet)
    {
        val[utility::conversions::to_string_t(U("supply"))] = ModelBase::toJson(m_Supply);
    }
    if(m_Asset_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_url"))] = ModelBase::toJson(m_Asset_url);
    }
    if(m_Custom_propsIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_props"))] = ModelBase::toJson(m_Custom_props);
    }
    if(m_Collection_idIsSet)
    {
        val[utility::conversions::to_string_t(U("collection_id"))] = ModelBase::toJson(m_Collection_id);
    }
    if(m_Project_idIsSet)
    {
        val[utility::conversions::to_string_t(U("project_id"))] = ModelBase::toJson(m_Project_id);
    }

    return val;
}

bool UpdateAssetDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supply")));
        if(!fieldValue.is_null())
        {
            double refVal_setSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupply);
            setSupply(refVal_setSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetUrl);
            setAssetUrl(refVal_setAssetUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setCustomProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomProps);
            setCustomProps(refVal_setCustomProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collection_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collection_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectionId);
            setCollectionId(refVal_setCollectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("project_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("project_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProjectId);
            setProjectId(refVal_setProjectId);
        }
    }
    return ok;
}

void UpdateAssetDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_SupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supply")), m_Supply));
    }
    if(m_Asset_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_url")), m_Asset_url));
    }
    if(m_Custom_propsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_props")), m_Custom_props));
    }
    if(m_Collection_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collection_id")), m_Collection_id));
    }
    if(m_Project_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("project_id")), m_Project_id));
    }
}

bool UpdateAssetDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supply"))))
    {
        double refVal_setSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supply"))), refVal_setSupply );
        setSupply(refVal_setSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_url"))))
    {
        utility::string_t refVal_setAssetUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_url"))), refVal_setAssetUrl );
        setAssetUrl(refVal_setAssetUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_props"))))
    {
        std::shared_ptr<Object> refVal_setCustomProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_props"))), refVal_setCustomProps );
        setCustomProps(refVal_setCustomProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collection_id"))))
    {
        utility::string_t refVal_setCollectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collection_id"))), refVal_setCollectionId );
        setCollectionId(refVal_setCollectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("project_id"))))
    {
        utility::string_t refVal_setProjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("project_id"))), refVal_setProjectId );
        setProjectId(refVal_setProjectId);
    }
    return ok;
}

utility::string_t UpdateAssetDto::getName() const
{
    return m_Name;
}

void UpdateAssetDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateAssetDto::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateAssetDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UpdateAssetDto::getDescription() const
{
    return m_Description;
}

void UpdateAssetDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool UpdateAssetDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UpdateAssetDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
double UpdateAssetDto::getPrice() const
{
    return m_Price;
}

void UpdateAssetDto::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool UpdateAssetDto::priceIsSet() const
{
    return m_PriceIsSet;
}

void UpdateAssetDto::unsetPrice()
{
    m_PriceIsSet = false;
}
double UpdateAssetDto::getSupply() const
{
    return m_Supply;
}

void UpdateAssetDto::setSupply(double value)
{
    m_Supply = value;
    m_SupplyIsSet = true;
}

bool UpdateAssetDto::supplyIsSet() const
{
    return m_SupplyIsSet;
}

void UpdateAssetDto::unsetSupply()
{
    m_SupplyIsSet = false;
}
utility::string_t UpdateAssetDto::getAssetUrl() const
{
    return m_Asset_url;
}

void UpdateAssetDto::setAssetUrl(const utility::string_t& value)
{
    m_Asset_url = value;
    m_Asset_urlIsSet = true;
}

bool UpdateAssetDto::assetUrlIsSet() const
{
    return m_Asset_urlIsSet;
}

void UpdateAssetDto::unsetAsset_url()
{
    m_Asset_urlIsSet = false;
}
std::shared_ptr<Object> UpdateAssetDto::getCustomProps() const
{
    return m_Custom_props;
}

void UpdateAssetDto::setCustomProps(const std::shared_ptr<Object>& value)
{
    m_Custom_props = value;
    m_Custom_propsIsSet = true;
}

bool UpdateAssetDto::customPropsIsSet() const
{
    return m_Custom_propsIsSet;
}

void UpdateAssetDto::unsetCustom_props()
{
    m_Custom_propsIsSet = false;
}
utility::string_t UpdateAssetDto::getCollectionId() const
{
    return m_Collection_id;
}

void UpdateAssetDto::setCollectionId(const utility::string_t& value)
{
    m_Collection_id = value;
    m_Collection_idIsSet = true;
}

bool UpdateAssetDto::collectionIdIsSet() const
{
    return m_Collection_idIsSet;
}

void UpdateAssetDto::unsetCollection_id()
{
    m_Collection_idIsSet = false;
}
utility::string_t UpdateAssetDto::getProjectId() const
{
    return m_Project_id;
}

void UpdateAssetDto::setProjectId(const utility::string_t& value)
{
    m_Project_id = value;
    m_Project_idIsSet = true;
}

bool UpdateAssetDto::projectIdIsSet() const
{
    return m_Project_idIsSet;
}

void UpdateAssetDto::unsetProject_id()
{
    m_Project_idIsSet = false;
}
}


