/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AssetsResponse.h"

namespace models {



AssetsResponse::AssetsResponse()
{
    m_ItemsIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
    m_Limit = 0.0;
    m_LimitIsSet = false;
    m_Page = 0.0;
    m_PageIsSet = false;
}

AssetsResponse::~AssetsResponse()
{
}

void AssetsResponse::validate()
{
    // TODO: implement validation
}

web::json::value AssetsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_PageIsSet)
    {
        val[utility::conversions::to_string_t(U("page"))] = ModelBase::toJson(m_Page);
    }

    return val;
}

bool AssetsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Asset>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            double refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("page"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("page")));
        if(!fieldValue.is_null())
        {
            double refVal_setPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPage);
            setPage(refVal_setPage);
        }
    }
    return ok;
}

void AssetsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("page")), m_Page));
    }
}

bool AssetsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<Asset>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        double refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        double refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("page"))))
    {
        double refVal_setPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("page"))), refVal_setPage );
        setPage(refVal_setPage);
    }
    return ok;
}

std::vector<std::shared_ptr<Asset>>& AssetsResponse::getItems()
{
    return m_Items;
}

void AssetsResponse::setItems(const std::vector<std::shared_ptr<Asset>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool AssetsResponse::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void AssetsResponse::unsetItems()
{
    m_ItemsIsSet = false;
}
double AssetsResponse::getTotal() const
{
    return m_Total;
}

void AssetsResponse::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool AssetsResponse::totalIsSet() const
{
    return m_TotalIsSet;
}

void AssetsResponse::unsetTotal()
{
    m_TotalIsSet = false;
}
double AssetsResponse::getLimit() const
{
    return m_Limit;
}

void AssetsResponse::setLimit(double value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool AssetsResponse::limitIsSet() const
{
    return m_LimitIsSet;
}

void AssetsResponse::unsetLimit()
{
    m_LimitIsSet = false;
}
double AssetsResponse::getPage() const
{
    return m_Page;
}

void AssetsResponse::setPage(double value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool AssetsResponse::pageIsSet() const
{
    return m_PageIsSet;
}

void AssetsResponse::unsetPage()
{
    m_PageIsSet = false;
}
}


