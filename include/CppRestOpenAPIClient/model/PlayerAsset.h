/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlayerAsset.h
 *
 * 
 */

#ifndef MODELS_PlayerAsset_H_
#define MODELS_PlayerAsset_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace models {


/// <summary>
/// 
/// </summary>
class  PlayerAsset
    : public ModelBase
{
public:
    PlayerAsset();
    virtual ~PlayerAsset();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PlayerAsset members

    /// <summary>
    /// The unique identifier for the Player asset entity.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The amount of the specific asset that the player has.
    /// </summary>
    double getAmount() const;
    bool amountIsSet() const;
    void unsetAmount();

    void setAmount(double value);

    /// <summary>
    /// The unique identifier of the player that the asset is associated with.
    /// </summary>
    utility::string_t getPlayerId() const;
    bool playerIdIsSet() const;
    void unsetPlayer_id();

    void setPlayerId(const utility::string_t& value);

    /// <summary>
    /// The unique identifier of the asset that the asset is associated with.
    /// </summary>
    utility::string_t getAssetId() const;
    bool assetIdIsSet() const;
    void unsetAsset_id();

    void setAssetId(const utility::string_t& value);

    /// <summary>
    /// The unique identifier of the collection that the Player asset is associated with.
    /// </summary>
    utility::string_t getCollectionId() const;
    bool collectionIdIsSet() const;
    void unsetCollection_id();

    void setCollectionId(const utility::string_t& value);

    /// <summary>
    /// The unique identifier of the account that the Player belongs to.
    /// </summary>
    double getAccountId() const;
    bool accountIdIsSet() const;
    void unsetAccount_id();

    void setAccountId(double value);

    /// <summary>
    /// The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting.
    /// </summary>
    utility::string_t getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProject_id();

    void setProjectId(const utility::string_t& value);

    /// <summary>
    /// The date when the player was created.
    /// </summary>
    utility::datetime getCreatedOn() const;
    bool createdOnIsSet() const;
    void unsetCreated_on();

    void setCreatedOn(const utility::datetime& value);

    /// <summary>
    /// The date when the player was last modified.
    /// </summary>
    utility::datetime getModifiedOn() const;
    bool modifiedOnIsSet() const;
    void unsetModified_on();

    void setModifiedOn(const utility::datetime& value);

    /// <summary>
    /// The Id of the user who created the player.
    /// </summary>
    double getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreated_by();

    void setCreatedBy(double value);

    /// <summary>
    /// The Id of the user who last modified the player.
    /// </summary>
    double getModifiedBy() const;
    bool modifiedByIsSet() const;
    void unsetModified_by();

    void setModifiedBy(double value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    double m_Amount;
    bool m_AmountIsSet;
    utility::string_t m_Player_id;
    bool m_Player_idIsSet;
    utility::string_t m_Asset_id;
    bool m_Asset_idIsSet;
    utility::string_t m_Collection_id;
    bool m_Collection_idIsSet;
    double m_Account_id;
    bool m_Account_idIsSet;
    utility::string_t m_Project_id;
    bool m_Project_idIsSet;
    utility::datetime m_Created_on;
    bool m_Created_onIsSet;
    utility::datetime m_Modified_on;
    bool m_Modified_onIsSet;
    double m_Created_by;
    bool m_Created_byIsSet;
    double m_Modified_by;
    bool m_Modified_byIsSet;
};


}

#endif /* MODELS_PlayerAsset_H_ */
