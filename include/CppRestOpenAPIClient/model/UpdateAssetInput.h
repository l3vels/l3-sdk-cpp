/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateAssetInput.h
 *
 * 
 */

#ifndef MODELS_UpdateAssetInput_H_
#define MODELS_UpdateAssetInput_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"

namespace models {


/// <summary>
/// 
/// </summary>
class  UpdateAssetInput
    : public ModelBase
{
public:
    UpdateAssetInput();
    virtual ~UpdateAssetInput();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateAssetInput members

    /// <summary>
    /// The name of the asset.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The story of asset.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Price of asset
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// Supply of asset
    /// </summary>
    double getSupply() const;
    bool supplyIsSet() const;
    void unsetSupply();

    void setSupply(double value);

    /// <summary>
    /// Asset URL
    /// </summary>
    utility::string_t getAssetUrl() const;
    bool assetUrlIsSet() const;
    void unsetAsset_url();

    void setAssetUrl(const utility::string_t& value);

    /// <summary>
    /// Custom props for asset.
    /// </summary>
    std::shared_ptr<Object> getCustomProps() const;
    bool customPropsIsSet() const;
    void unsetCustom_props();

    void setCustomProps(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Collection ID to find and update the asset in. Example: Update AK-47 asset in Weapons collection.
    /// </summary>
    utility::string_t getCollectionId() const;
    bool collectionIdIsSet() const;
    void unsetCollection_id();

    void setCollectionId(const utility::string_t& value);

    /// <summary>
    /// Game ID to update the asset in. Example: Call of Duty
    /// </summary>
    utility::string_t getGameId() const;
    bool gameIdIsSet() const;
    void unsetGame_id();

    void setGameId(const utility::string_t& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    double m_Price;
    bool m_PriceIsSet;
    double m_Supply;
    bool m_SupplyIsSet;
    utility::string_t m_Asset_url;
    bool m_Asset_urlIsSet;
    std::shared_ptr<Object> m_Custom_props;
    bool m_Custom_propsIsSet;
    utility::string_t m_Collection_id;
    bool m_Collection_idIsSet;
    utility::string_t m_Game_id;
    bool m_Game_idIsSet;
};


}

#endif /* MODELS_UpdateAssetInput_H_ */
