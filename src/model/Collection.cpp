/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Collection.h"

namespace models {



Collection::Collection()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Unique_id = utility::conversions::to_string_t("");
    m_Unique_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Logo_image = utility::conversions::to_string_t("");
    m_Logo_imageIsSet = false;
    m_MediasIsSet = false;
    m_Main_media = utility::conversions::to_string_t("");
    m_Main_mediaIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Web_link = utility::conversions::to_string_t("");
    m_Web_linkIsSet = false;
    m_Supply = 0.0;
    m_SupplyIsSet = false;
    m_Custom_property_propsIsSet = false;
    m_Social_linksIsSet = false;
    m_Custom_asset_propsIsSet = false;
    m_CategoriesIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Account_id = 0.0;
    m_Account_idIsSet = false;
    m_Project_id = utility::conversions::to_string_t("");
    m_Project_idIsSet = false;
    m_Created_on = utility::datetime();
    m_Created_onIsSet = false;
    m_Modified_on = utility::datetime();
    m_Modified_onIsSet = false;
    m_Created_by = 0.0;
    m_Created_byIsSet = false;
    m_Modified_by = 0.0;
    m_Modified_byIsSet = false;
}

Collection::~Collection()
{
}

void Collection::validate()
{
    // TODO: implement validation
}

web::json::value Collection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Unique_idIsSet)
    {
        val[utility::conversions::to_string_t(U("unique_id"))] = ModelBase::toJson(m_Unique_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Logo_imageIsSet)
    {
        val[utility::conversions::to_string_t(U("logo_image"))] = ModelBase::toJson(m_Logo_image);
    }
    if(m_MediasIsSet)
    {
        val[utility::conversions::to_string_t(U("medias"))] = ModelBase::toJson(m_Medias);
    }
    if(m_Main_mediaIsSet)
    {
        val[utility::conversions::to_string_t(U("main_media"))] = ModelBase::toJson(m_Main_media);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_Web_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("web_link"))] = ModelBase::toJson(m_Web_link);
    }
    if(m_SupplyIsSet)
    {
        val[utility::conversions::to_string_t(U("supply"))] = ModelBase::toJson(m_Supply);
    }
    if(m_Custom_property_propsIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_property_props"))] = ModelBase::toJson(m_Custom_property_props);
    }
    if(m_Social_linksIsSet)
    {
        val[utility::conversions::to_string_t(U("social_links"))] = ModelBase::toJson(m_Social_links);
    }
    if(m_Custom_asset_propsIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_asset_props"))] = ModelBase::toJson(m_Custom_asset_props);
    }
    if(m_CategoriesIsSet)
    {
        val[utility::conversions::to_string_t(U("categories"))] = ModelBase::toJson(m_Categories);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("account_id"))] = ModelBase::toJson(m_Account_id);
    }
    if(m_Project_idIsSet)
    {
        val[utility::conversions::to_string_t(U("project_id"))] = ModelBase::toJson(m_Project_id);
    }
    if(m_Created_onIsSet)
    {
        val[utility::conversions::to_string_t(U("created_on"))] = ModelBase::toJson(m_Created_on);
    }
    if(m_Modified_onIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_on"))] = ModelBase::toJson(m_Modified_on);
    }
    if(m_Created_byIsSet)
    {
        val[utility::conversions::to_string_t(U("created_by"))] = ModelBase::toJson(m_Created_by);
    }
    if(m_Modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_by"))] = ModelBase::toJson(m_Modified_by);
    }

    return val;
}

bool Collection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unique_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unique_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUniqueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueId);
            setUniqueId(refVal_setUniqueId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logo_image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logo_image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogoImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogoImage);
            setLogoImage(refVal_setLogoImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("medias"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("medias")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMedias;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMedias);
            setMedias(refVal_setMedias);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("main_media"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("main_media")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMainMedia;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMainMedia);
            setMainMedia(refVal_setMainMedia);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebLink);
            setWebLink(refVal_setWebLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supply")));
        if(!fieldValue.is_null())
        {
            double refVal_setSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupply);
            setSupply(refVal_setSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_property_props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_property_props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setCustomPropertyProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomPropertyProps);
            setCustomPropertyProps(refVal_setCustomPropertyProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("social_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("social_links")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSocialLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSocialLinks);
            setSocialLinks(refVal_setSocialLinks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_asset_props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_asset_props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setCustomAssetProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomAssetProps);
            setCustomAssetProps(refVal_setCustomAssetProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categories"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categories")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setCategories;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategories);
            setCategories(refVal_setCategories);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_id")));
        if(!fieldValue.is_null())
        {
            double refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("project_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("project_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProjectId);
            setProjectId(refVal_setProjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedOn);
            setCreatedOn(refVal_setCreatedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedOn);
            setModifiedOn(refVal_setModifiedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_by")));
        if(!fieldValue.is_null())
        {
            double refVal_setCreatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedBy);
            setCreatedBy(refVal_setCreatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_by")));
        if(!fieldValue.is_null())
        {
            double refVal_setModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedBy);
            setModifiedBy(refVal_setModifiedBy);
        }
    }
    return ok;
}

void Collection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Unique_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unique_id")), m_Unique_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Logo_imageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logo_image")), m_Logo_image));
    }
    if(m_MediasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("medias")), m_Medias));
    }
    if(m_Main_mediaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("main_media")), m_Main_media));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_Web_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_link")), m_Web_link));
    }
    if(m_SupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supply")), m_Supply));
    }
    if(m_Custom_property_propsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_property_props")), m_Custom_property_props));
    }
    if(m_Social_linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("social_links")), m_Social_links));
    }
    if(m_Custom_asset_propsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_asset_props")), m_Custom_asset_props));
    }
    if(m_CategoriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categories")), m_Categories));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_id")), m_Account_id));
    }
    if(m_Project_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("project_id")), m_Project_id));
    }
    if(m_Created_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_on")), m_Created_on));
    }
    if(m_Modified_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_on")), m_Modified_on));
    }
    if(m_Created_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_by")), m_Created_by));
    }
    if(m_Modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_by")), m_Modified_by));
    }
}

bool Collection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unique_id"))))
    {
        utility::string_t refVal_setUniqueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unique_id"))), refVal_setUniqueId );
        setUniqueId(refVal_setUniqueId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logo_image"))))
    {
        utility::string_t refVal_setLogoImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logo_image"))), refVal_setLogoImage );
        setLogoImage(refVal_setLogoImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("medias"))))
    {
        std::vector<utility::string_t> refVal_setMedias;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("medias"))), refVal_setMedias );
        setMedias(refVal_setMedias);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("main_media"))))
    {
        utility::string_t refVal_setMainMedia;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("main_media"))), refVal_setMainMedia );
        setMainMedia(refVal_setMainMedia);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_link"))))
    {
        utility::string_t refVal_setWebLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_link"))), refVal_setWebLink );
        setWebLink(refVal_setWebLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supply"))))
    {
        double refVal_setSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supply"))), refVal_setSupply );
        setSupply(refVal_setSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_property_props"))))
    {
        std::shared_ptr<Object> refVal_setCustomPropertyProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_property_props"))), refVal_setCustomPropertyProps );
        setCustomPropertyProps(refVal_setCustomPropertyProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("social_links"))))
    {
        std::vector<utility::string_t> refVal_setSocialLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("social_links"))), refVal_setSocialLinks );
        setSocialLinks(refVal_setSocialLinks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_asset_props"))))
    {
        std::shared_ptr<Object> refVal_setCustomAssetProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_asset_props"))), refVal_setCustomAssetProps );
        setCustomAssetProps(refVal_setCustomAssetProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categories"))))
    {
        std::shared_ptr<Object> refVal_setCategories;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categories"))), refVal_setCategories );
        setCategories(refVal_setCategories);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_id"))))
    {
        double refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_id"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("project_id"))))
    {
        utility::string_t refVal_setProjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("project_id"))), refVal_setProjectId );
        setProjectId(refVal_setProjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_on"))))
    {
        utility::datetime refVal_setCreatedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_on"))), refVal_setCreatedOn );
        setCreatedOn(refVal_setCreatedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_on"))))
    {
        utility::datetime refVal_setModifiedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_on"))), refVal_setModifiedOn );
        setModifiedOn(refVal_setModifiedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_by"))))
    {
        double refVal_setCreatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_by"))), refVal_setCreatedBy );
        setCreatedBy(refVal_setCreatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_by"))))
    {
        double refVal_setModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_by"))), refVal_setModifiedBy );
        setModifiedBy(refVal_setModifiedBy);
    }
    return ok;
}

utility::string_t Collection::getId() const
{
    return m_Id;
}

void Collection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Collection::idIsSet() const
{
    return m_IdIsSet;
}

void Collection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Collection::getUniqueId() const
{
    return m_Unique_id;
}

void Collection::setUniqueId(const utility::string_t& value)
{
    m_Unique_id = value;
    m_Unique_idIsSet = true;
}

bool Collection::uniqueIdIsSet() const
{
    return m_Unique_idIsSet;
}

void Collection::unsetUnique_id()
{
    m_Unique_idIsSet = false;
}
utility::string_t Collection::getName() const
{
    return m_Name;
}

void Collection::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Collection::nameIsSet() const
{
    return m_NameIsSet;
}

void Collection::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Collection::getDescription() const
{
    return m_Description;
}

void Collection::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Collection::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Collection::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Collection::getLogoImage() const
{
    return m_Logo_image;
}

void Collection::setLogoImage(const utility::string_t& value)
{
    m_Logo_image = value;
    m_Logo_imageIsSet = true;
}

bool Collection::logoImageIsSet() const
{
    return m_Logo_imageIsSet;
}

void Collection::unsetLogo_image()
{
    m_Logo_imageIsSet = false;
}
std::vector<utility::string_t>& Collection::getMedias()
{
    return m_Medias;
}

void Collection::setMedias(const std::vector<utility::string_t>& value)
{
    m_Medias = value;
    m_MediasIsSet = true;
}

bool Collection::mediasIsSet() const
{
    return m_MediasIsSet;
}

void Collection::unsetMedias()
{
    m_MediasIsSet = false;
}
utility::string_t Collection::getMainMedia() const
{
    return m_Main_media;
}

void Collection::setMainMedia(const utility::string_t& value)
{
    m_Main_media = value;
    m_Main_mediaIsSet = true;
}

bool Collection::mainMediaIsSet() const
{
    return m_Main_mediaIsSet;
}

void Collection::unsetMain_media()
{
    m_Main_mediaIsSet = false;
}
utility::string_t Collection::getUrl() const
{
    return m_Url;
}

void Collection::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool Collection::urlIsSet() const
{
    return m_UrlIsSet;
}

void Collection::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t Collection::getWebLink() const
{
    return m_Web_link;
}

void Collection::setWebLink(const utility::string_t& value)
{
    m_Web_link = value;
    m_Web_linkIsSet = true;
}

bool Collection::webLinkIsSet() const
{
    return m_Web_linkIsSet;
}

void Collection::unsetWeb_link()
{
    m_Web_linkIsSet = false;
}
double Collection::getSupply() const
{
    return m_Supply;
}

void Collection::setSupply(double value)
{
    m_Supply = value;
    m_SupplyIsSet = true;
}

bool Collection::supplyIsSet() const
{
    return m_SupplyIsSet;
}

void Collection::unsetSupply()
{
    m_SupplyIsSet = false;
}
std::shared_ptr<Object> Collection::getCustomPropertyProps() const
{
    return m_Custom_property_props;
}

void Collection::setCustomPropertyProps(const std::shared_ptr<Object>& value)
{
    m_Custom_property_props = value;
    m_Custom_property_propsIsSet = true;
}

bool Collection::customPropertyPropsIsSet() const
{
    return m_Custom_property_propsIsSet;
}

void Collection::unsetCustom_property_props()
{
    m_Custom_property_propsIsSet = false;
}
std::vector<utility::string_t>& Collection::getSocialLinks()
{
    return m_Social_links;
}

void Collection::setSocialLinks(const std::vector<utility::string_t>& value)
{
    m_Social_links = value;
    m_Social_linksIsSet = true;
}

bool Collection::socialLinksIsSet() const
{
    return m_Social_linksIsSet;
}

void Collection::unsetSocial_links()
{
    m_Social_linksIsSet = false;
}
std::shared_ptr<Object> Collection::getCustomAssetProps() const
{
    return m_Custom_asset_props;
}

void Collection::setCustomAssetProps(const std::shared_ptr<Object>& value)
{
    m_Custom_asset_props = value;
    m_Custom_asset_propsIsSet = true;
}

bool Collection::customAssetPropsIsSet() const
{
    return m_Custom_asset_propsIsSet;
}

void Collection::unsetCustom_asset_props()
{
    m_Custom_asset_propsIsSet = false;
}
std::shared_ptr<Object> Collection::getCategories() const
{
    return m_Categories;
}

void Collection::setCategories(const std::shared_ptr<Object>& value)
{
    m_Categories = value;
    m_CategoriesIsSet = true;
}

bool Collection::categoriesIsSet() const
{
    return m_CategoriesIsSet;
}

void Collection::unsetCategories()
{
    m_CategoriesIsSet = false;
}
utility::string_t Collection::getStatus() const
{
    return m_Status;
}

void Collection::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Collection::statusIsSet() const
{
    return m_StatusIsSet;
}

void Collection::unsetStatus()
{
    m_StatusIsSet = false;
}
double Collection::getAccountId() const
{
    return m_Account_id;
}

void Collection::setAccountId(double value)
{
    m_Account_id = value;
    m_Account_idIsSet = true;
}

bool Collection::accountIdIsSet() const
{
    return m_Account_idIsSet;
}

void Collection::unsetAccount_id()
{
    m_Account_idIsSet = false;
}
utility::string_t Collection::getProjectId() const
{
    return m_Project_id;
}

void Collection::setProjectId(const utility::string_t& value)
{
    m_Project_id = value;
    m_Project_idIsSet = true;
}

bool Collection::projectIdIsSet() const
{
    return m_Project_idIsSet;
}

void Collection::unsetProject_id()
{
    m_Project_idIsSet = false;
}
utility::datetime Collection::getCreatedOn() const
{
    return m_Created_on;
}

void Collection::setCreatedOn(const utility::datetime& value)
{
    m_Created_on = value;
    m_Created_onIsSet = true;
}

bool Collection::createdOnIsSet() const
{
    return m_Created_onIsSet;
}

void Collection::unsetCreated_on()
{
    m_Created_onIsSet = false;
}
utility::datetime Collection::getModifiedOn() const
{
    return m_Modified_on;
}

void Collection::setModifiedOn(const utility::datetime& value)
{
    m_Modified_on = value;
    m_Modified_onIsSet = true;
}

bool Collection::modifiedOnIsSet() const
{
    return m_Modified_onIsSet;
}

void Collection::unsetModified_on()
{
    m_Modified_onIsSet = false;
}
double Collection::getCreatedBy() const
{
    return m_Created_by;
}

void Collection::setCreatedBy(double value)
{
    m_Created_by = value;
    m_Created_byIsSet = true;
}

bool Collection::createdByIsSet() const
{
    return m_Created_byIsSet;
}

void Collection::unsetCreated_by()
{
    m_Created_byIsSet = false;
}
double Collection::getModifiedBy() const
{
    return m_Modified_by;
}

void Collection::setModifiedBy(double value)
{
    m_Modified_by = value;
    m_Modified_byIsSet = true;
}

bool Collection::modifiedByIsSet() const
{
    return m_Modified_byIsSet;
}

void Collection::unsetModified_by()
{
    m_Modified_byIsSet = false;
}
}


